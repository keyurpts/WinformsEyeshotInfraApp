# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
    filePath: 'WindowsFormsApp1/WindowsFormsApp1/buildTools/UpdateClickonceVersionNumberInProjectFile.ps1'
    arguments: '-ProjectFile WindowsFormsApp1.csproj -BuildSystemsBuildId $(Build.BuildId)'
    workingDirectory: 'WindowsFormsApp1/WindowsFormsApp1'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    vsVersion: '17.0'
    # msbuildArgs: '/target:publish'
    msbuildArgs: '/target:publish /p:PublishDir=bin\Release'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'WindowsFormsApp1\\WindowsFormsApp1\\bin\\$(buildConfiguration)'
    # SourceFolder: 'WindowsFormsApp1\\WindowsFormsApp1\\publish'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Import the System.Text.RegularExpressions assembly
      Add-Type -AssemblyName "System.Text.RegularExpressions"
      
      # Define the path to the .exe.config file in the drop folder
      $configFilePath = "$(Build.ArtifactStagingDirectory)\WindowsFormsApp1.exe.config"
      
      # Define the title values based on the environment
      $titleDev = "TitleEditedThroughPipeline"
      
      # Read the content of the .exe.config file
      $configContent = Get-Content -Path $configFilePath -Raw
      
      # Define the regex pattern and replacement
      $pattern = '<add key="ApplicationTitle" value=".*?"/>'
      $replacement = '<add key="ApplicationTitle" value="' + $titleDev + '"/>'
      
      # Perform the regex replacement
      $newConfigContent = [Regex]::Replace($configContent, $pattern, $replacement)
      
      # Write the updated content back to the .exe.config file
      Set-Content -Path $configFilePath -Value $newConfigContent

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
